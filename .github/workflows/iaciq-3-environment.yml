name: iaciq tag

on:
  workflow_call:
    inputs:
      group:
        type: string
        description: 'The current concurrency group'
        required: true
      folder:
        type: string
        description: 'The current folder'
        required: true
      iaciq:
        type: string
        description: 'The full output from iaciq.json'
        required: true
      runs_on:
        type: string
        description: 'The runs-on value from iaciq.json'
        required: false
        default: 'ubuntu-latest'


jobs:
  SetupTFEnv:
    name: Setup ${{ fromJson(inputs.iaciq).metadata[inputs.folder].job_name }}
    if: ${{ fromJson(inputs.iaciq).metadata[inputs.folder].workflow_tag == 'iaciq-4-tf-azure' }}
    runs-on: ${{ inputs.runs_on }}
    defaults:
      run:
        shell: bash
    outputs:
      runs_on: ${{ steps.environment.outputs.runs_on }}
      job_name: ${{ steps.environment.outputs.job_name }}
      environment_init: ${{ steps.environment.outputs.environment_init }}
      environment_plan: ${{ steps.environment.outputs.environment_plan       }}
      environment_apply: ${{ steps.environment.outputs.environment_apply }}
      terraform_module_path: ${{ steps.environment.outputs.terraform_module_path }}
      TF_VERSION: ${{ steps.environment.outputs.TF_VERSION }}
      TF_KEY: ${{ steps.environment.outputs.TF_KEY }}
      TF_STORAGE_ACCOUNT: ${{ steps.environment.outputs.TF_STORAGE_ACCOUNT }}
      TF_RESOURCE_GROUP: ${{ steps.environment.outputs.TF_RESOURCE_GROUP }}
      TF_CONTAINER_NAME: ${{ steps.environment.outputs.TF_CONTAINER_NAME }}
      TF_DESTROY: ${{ steps.environment.outputs.TF_DESTROY }}
      ARM_CLIENT_ID_INIT: ${{ steps.environment.outputs.ARM_CLIENT_ID_INIT }}
      ARM_CLIENT_ID_PLAN: ${{ steps.environment.outputs.ARM_CLIENT_ID_PLAN }}
      ARM_CLIENT_ID_APPLY: ${{ steps.environment.outputs.ARM_CLIENT_ID_APPLY }}
      ARM_TENANT_ID: ${{ steps.environment.outputs.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ steps.environment.outputs.ARM_SUBSCRIPTION_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Terraform Azure Environment
        id: environment
        run: |
          # Configure github environments for terraform init, plan and apply. Default environment names are terraform-init, terraform-plan, terraform-apply. These can be overridden as optional inputs, who can be overridden by iaciq.yml values
          if [[ -z "${{ fromJson(inputs.iaciq).metadata[inputs.folder].environment_init }}" ]]; then
            echo "environment_init=terraform-init" >> "$GITHUB_OUTPUT"
          else
            echo "environment_init=${{ fromJson(inputs.iaciq).metadata[inputs.folder].environment_init }}" >> "$GITHUB_OUTPUT"
          fi
          if [[ -z "${{ fromJson(inputs.iaciq).metadata[inputs.folder].environment_plan }}" ]]; then
            echo "environment_plan=terraform-plan" >> "$GITHUB_OUTPUT"
          else
            echo "environment_plan=${{ fromJson(inputs.iaciq).metadata[inputs.folder].environment_plan }}" >> "$GITHUB_OUTPUT"
          fi
          if [[ -z "${{ fromJson(inputs.iaciq).metadata[inputs.folder].environment_apply }}" ]]; then
            echo "environment_apply=terraform-apply" >> "$GITHUB_OUTPUT"
          else
            echo "environment_apply=${{ fromJson(inputs.iaciq).metadata[inputs.folder].environment_apply }}" >> "$GITHUB_OUTPUT"
          fi

          # Resolve state file name (TF_KEY), defaults to folder name.tfstate
          if [[ -n "${{ fromJson(inputs.iaciq).metadata[inputs.folder].TF_KEY }}" ]]; then
            echo "TF_KEY=${{ fromJson(inputs.iaciq).metadata[inputs.folder].TF_KEY }}" >> "$GITHUB_OUTPUT"
          else
            basedir=$(basename ${{ inputs.folder }})
            echo "TF_KEY=${basedir}.tfstate" >> "$GITHUB_OUTPUT"
          fi

          # Resolve Terraform version (TF_VERSION), defaults to latest
          if [[ -n "${{ fromJson(inputs.iaciq).metadata[inputs.folder].TF_VERSION }}" ]]; then
            echo "TF_VERSION=${{ fromJson(inputs.iaciq).metadata[inputs.folder].TF_VERSION }}" >> "$GITHUB_OUTPUT"
          elif [[ -n "$TF_VERSION" ]]; then
            echo "TF_VERSION=$TF_VERSION" >> "$GITHUB_OUTPUT"
          else
            # Use curl to get the latest version of Terraform
            TF_VERSION=$(curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | jq -r '.tag_name')
            echo "TF_VERSION=${TF_VERSION}" >> "$GITHUB_OUTPUT"
          fi

          # Resolve TF_ variables, iaciq.yml values override repository variables
          if [[ -n "${{ fromJson(inputs.iaciq).metadata[inputs.folder].TF_BACKEND_TYPE }}" ]]; then
            echo "TF_BACKEND_TYPE=${{ fromJson(inputs.iaciq).metadata[inputs.folder].TF_BACKEND_TYPE }}" >> "$GITHUB_OUTPUT"
          elif [[ -n "$TF_BACKEND_TYPE" ]]; then
            echo "TF_BACKEND_TYPE=$TF_BACKEND_TYPE" >> "$GITHUB_OUTPUT"
          else
            echo "TF_BACKEND_TYPE=azurerm" >> "$GITHUB_OUTPUT"
          fi

          if [[ -n "${{ fromJson(inputs.iaciq).metadata[inputs.folder].TF_STORAGE_ACCOUNT }}" ]]; then
            echo "TF_STORAGE_ACCOUNT=${{ fromJson(inputs.iaciq).metadata[inputs.folder].TF_STORAGE_ACCOUNT }}" >> "$GITHUB_OUTPUT"
          elif [[ -n "$TF_STORAGE_ACCOUNT" ]]; then
            echo "TF_STORAGE_ACCOUNT=$TF_STORAGE_ACCOUNT" >> "$GITHUB_OUTPUT"
          else
            echo "TF_STORAGE_ACCOUNT=iaciq" >> "$GITHUB_OUTPUT"
          fi

          if [[ -n "${{ fromJson(inputs.iaciq).metadata[inputs.folder].TF_RESOURCE_GROUP }}" ]]; then
            echo "TF_RESOURCE_GROUP=${{ fromJson(inputs.iaciq).metadata[inputs.folder].TF_RESOURCE_GROUP }}" >> "$GITHUB_OUTPUT"
          elif [[ -n "$TF_RESOURCE_GROUP" ]]; then
            echo "TF_RESOURCE_GROUP=$TF_RESOURCE_GROUP" >> "$GITHUB_OUTPUT"
          else
            echo "TF_RESOURCE_GROUP=iaciq" >> "$GITHUB_OUTPUT"
          fi

          if [[ -n "${{ fromJson(inputs.iaciq).metadata[inputs.folder].TF_CONTAINER_NAME }}" ]]; then
            echo "TF_CONTAINER_NAME=${{ fromJson(inputs.iaciq).metadata[inputs.folder].TF_CONTAINER_NAME }}" >> "$GITHUB_OUTPUT"
          elif [[ -n "$TF_CONTAINER_NAME" ]]; then
            echo "TF_CONTAINER_NAME=$TF_CONTAINER_NAME" >> "$GITHUB_OUTPUT"
          else
            echo "TF_CONTAINER_NAME=iaciq" >> "$GITHUB_OUTPUT"
          fi

          if [[ -n "${{ fromJson(inputs.iaciq).metadata[inputs.folder].TF_DESTROY }}" ]]; then
            echo "TF_DESTROY=${{ fromJson(inputs.iaciq).metadata[inputs.folder].TF_DESTROY }}" >> "$GITHUB_OUTPUT"
          elif [[ -n "$TF_DESTROY" ]]; then
            echo "TF_DESTROY=$TF_DESTROY" >> "$GITHUB_OUTPUT"
          else
            echo "TF_DESTROY=false" >> "$GITHUB_OUTPUT"
          fi

          # Resolve runs_on variable, iaciq.yml values override repository variables
          if [[ -n "${{ fromJson(inputs.iaciq).metadata[inputs.folder].runs_on }}" ]]; then
            echo "runs_on=${{ fromJson(inputs.iaciq).metadata[inputs.folder].runs_on }}" >> "$GITHUB_OUTPUT"
          elif [[ -n "$runs_on" ]]; then
            echo "runs_on=$runs_on" >> "$GITHUB_OUTPUT"
          else
            echo "runs_on=ubuntu-latest" >> "$GITHUB_OUTPUT"
          fi

          # Resolve terraform_module_path variable, iaciq.yml values override repository variables
          if [[ -n "${{ fromJson(inputs.iaciq).metadata[inputs.folder].terraform_module_path }}" ]]; then
            echo "terraform_module_path=${{ fromJson(inputs.iaciq).metadata[inputs.folder].terraform_module_path }}" >> "$GITHUB_OUTPUT"
          elif [[ -n "$terraform_module_path" ]]; then
            echo "terraform_module_path=$terraform_module_path" >> "$GITHUB_OUTPUT"
          else
            echo "terraform_module_path=${{ inputs.folder }}" >> "$GITHUB_OUTPUT"
          fi

          # Resolve job_name variable, iaciq.yml values overrides default folder basedir name
          if [[ -n "${{ fromJson(inputs.iaciq).metadata[inputs.folder].job_name }}" ]]; then
            echo "job_name=${{ fromJson(inputs.iaciq).metadata[inputs.folder].job_name }}" >> "$GITHUB_OUTPUT"
          else
            job_name=$(basename ${{ inputs.folder }})
            echo "job_name=${job_name}" >> "$GITHUB_OUTPUT"            
          fi

          # Resolve ARM_TENANT_ID variable, iaciq.yml values override repository variables
          if [[ -n "${{ fromJson(inputs.iaciq).metadata[inputs.folder].ARM_TENANT_ID }}" ]]; then
            echo "ARM_TENANT_ID=${{ fromJson(inputs.iaciq).metadata[inputs.folder].ARM_TENANT_ID }}" >> "$GITHUB_OUTPUT"
          elif [[ -n "$ARM_TENANT_ID" ]]; then
            echo "ARM_TENANT_ID=$ARM_TENANT_ID" >> "$GITHUB_OUTPUT"
          else
            echo "No ARM_TENANT_ID found in input, iaciq.yml or github environment"
            exit 1
          fi

          # Resolve ARM_SUBSCRIPTION_ID variable, iaciq.yml values override repository variables
          if [[ -n "${{ fromJson(inputs.iaciq).metadata[inputs.folder].ARM_SUBSCRIPTION_ID }}" ]]; then
            echo "ARM_SUBSCRIPTION_ID=${{ fromJson(inputs.iaciq).metadata[inputs.folder].ARM_SUBSCRIPTION_ID }}" >> "$GITHUB_OUTPUT"
          elif [[ -n "$ARM_SUBSCRIPTION_ID" ]]; then
            echo "ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID" >> "$GITHUB_OUTPUT"
          else
            echo "No ARM_SUBSCRIPTION_ID found in input, iaciq.yml or github environment"
            exit 1
          fi

          # ARM_CLIENT_ID_INIT
          if [[ -n "${{ fromJson(inputs.iaciq).metadata[inputs.folder].ARM_CLIENT_ID_INIT }}" ]]; then
            echo "ARM_CLIENT_ID_INIT=${{ fromJson(inputs.iaciq).metadata[inputs.folder].ARM_CLIENT_ID_INIT }}" | tee -a "$GITHUB_ENV" "$GITHUB_OUTPUT"
          elif [[ -n "$ARM_CLIENT_ID_INIT" ]]; then
            echo "ARM_CLIENT_ID_INIT=$ARM_CLIENT_ID_INIT" | tee -a "$GITHUB_ENV" "$GITHUB_OUTPUT"
          fi

          # ARM_CLIENT_ID_PLAN
          if [[ -n "${{ fromJson(inputs.iaciq).metadata[inputs.folder].ARM_CLIENT_ID_PLAN }}" ]]; then
            echo "ARM_CLIENT_ID_PLAN=${{ fromJson(inputs.iaciq).metadata[inputs.folder].ARM_CLIENT_ID_PLAN }}" | tee -a "$GITHUB_ENV" "$GITHUB_OUTPUT"
          elif [[ -n "$ARM_CLIENT_ID_PLAN" ]]; then
            echo "ARM_CLIENT_ID_PLAN=$ARM_CLIENT_ID_PLAN" | tee -a "$GITHUB_ENV" "$GITHUB_OUTPUT"
          fi

          # Resolve ARM_CLIENT_ID_APPLY variable, iaciq.yml values override repository variables.
          # ARM_CLIENT_ID_APPLY
          if [[ -n "${{ fromJson(inputs.iaciq).metadata[inputs.folder].ARM_CLIENT_ID_APPLY }}" ]]; then
            echo "ARM_CLIENT_ID_APPLY=${{ fromJson(inputs.iaciq).metadata[inputs.folder].ARM_CLIENT_ID_APPLY }}" | tee -a "$GITHUB_ENV" "$GITHUB_OUTPUT"
          elif [[ -n "$ARM_CLIENT_ID_APPLY" ]]; then
            echo "ARM_CLIENT_ID_APPLY=$ARM_CLIENT_ID_APPLY" | tee -a "$GITHUB_ENV" "$GITHUB_OUTPUT"
          fi

  CheckStateExist:
    name: Check if state exist ${{ fromJson(inputs.iaciq).metadata[inputs.folder].job_name }}
    if: ${{ fromJson(inputs.iaciq).metadata[inputs.folder].workflow_tag == 'iaciq-4-tf-azure' }}
    needs:
      - SetupTFEnv
    runs-on: ${{ inputs.runs_on }}
    defaults:
      run:
        shell: bash
    env:
      ARM_CLIENT_ID: ${{ needs.SetupTFEnv.outputs.ARM_CLIENT_ID_APPLY }}
      ARM_SUBSCRIPTION_ID: ${{ needs.SetupTFEnv.outputs.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ needs.SetupTFEnv.outputs.ARM_TENANT_ID }}
      TF_STORAGE_ACCOUNT: ${{ needs.SetupTFEnv.outputs.TF_STORAGE_ACCOUNT }}
      TF_CONTAINER_NAME: ${{ needs.SetupTFEnv.outputs.TF_CONTAINER_NAME }}
      TF_KEY: ${{ needs.SetupTFEnv.outputs.TF_KEY }}
    outputs:
      STATE_EXISTS: ${{ steps.check_blob.outputs.STATE_EXISTS }}
    steps:
      - name: Login to Azure CLI
        uses: azure/login@v2
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}
      
      - name: Set Azure Subscription
        run: az account set --subscription $ARM_SUBSCRIPTION_ID
        
      - name: Check if Terraform state file exists in the Azure blob storage
        id: check_blob
        run: |
          EXISTS=$(az storage blob exists --auth-mode login --account-name $TF_STORAGE_ACCOUNT --container-name $TF_CONTAINER_NAME --name $TF_KEY --output tsv)
          if [[ $EXISTS == "True" ]]; then
            echo "$TF_KEY exists in $TF_CONTAINER_NAME."
            echo "STATE_EXISTS=true" | tee -a "$GITHUB_ENV" "$GITHUB_OUTPUT"
          else
            echo "$TF_KEY does not exist in $TF_CONTAINER_NAME."
            echo "STATE_EXISTS=false" | tee -a "$GITHUB_ENV" "$GITHUB_OUTPUT"
          fi
        
  # One conditional job for each workflow type here
  CallTFAzure:
    name: "Terraform Azure"
    needs:
      - SetupTFEnv
      - CheckStateExist
    if: ${{ fromJson(inputs.iaciq).metadata[inputs.folder].workflow_tag == 'iaciq-4-tf-azure' }}
    uses: blinqas/iaciq/.github/workflows/iaciq-4-tf-azure.yml@main
    with:
      job_name: ${{ needs.SetupTFEnv.outputs.job_name }}
      iaciq: ${{ inputs.iaciq }}
      group: ${{ inputs.group }}    
      folder: ${{ inputs.folder }}
      runs_on: ${{ needs.SetupTFEnv.outputs.runs_on }}
      environment_init: ${{ needs.SetupTFEnv.outputs.environment_init }}
      environment_plan: ${{ needs.SetupTFEnv.outputs.environment_plan }}
      environment_apply: ${{ needs.SetupTFEnv.outputs.environment_apply }}
      terraform_module_path:  ${{ needs.SetupTFEnv.outputs.terraform_module_path }}
      TF_KEY: ${{ needs.SetupTFEnv.outputs.TF_KEY }}
      TF_VERSION: ${{ needs.SetupTFEnv.outputs.TF_VERSION }}
      TF_STORAGE_ACCOUNT: ${{ needs.SetupTFEnv.outputs.TF_STORAGE_ACCOUNT }}
      TF_RESOURCE_GROUP: ${{ needs.SetupTFEnv.outputs.TF_RESOURCE_GROUP }}
      TF_CONTAINER_NAME: ${{ needs.SetupTFEnv.outputs.TF_CONTAINER_NAME }}
      TF_DESTROY: ${{ needs.SetupTFEnv.outputs.TF_DESTROY }}
      ARM_TENANT_ID: ${{ needs.SetupTFEnv.outputs.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ needs.SetupTFEnv.outputs.ARM_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID_INIT: ${{ needs.SetupTFEnv.outputs.ARM_CLIENT_ID_INIT }}
      ARM_CLIENT_ID_PLAN: ${{ needs.SetupTFEnv.outputs.ARM_CLIENT_ID_PLAN }}
      ARM_CLIENT_ID_APPLY: ${{ needs.SetupTFEnv.outputs.ARM_CLIENT_ID_APPLY }}
      STATE_EXISTS: '${{ needs.CheckStateExist.outputs.STATE_EXISTS }}'
    permissions:
      contents: read
      actions: write
      id-token: write

