name: iaciq tf azure

on:
  workflow_call:
    inputs:
      environment_init:
        type: string
        description: 'The environment to run the init in. Environment holds the ARM and TF variables for the init actions'
        required: true
      environment_plan:
        type: string
        description: 'The environment to run the plan in. Environment holds the ARM and TF variables for the plan and init actions'
        required: true
      environment_apply:
        type: string
        description: 'The environment to run the apply in. Environment holds the ARM and TF variables for the apply actions'
        required: true
      runs_on:
        type: string
        description: 'The tag of the runner to run the workflow on'
        required: true
      group:
        type: string
        description: 'The current concurrency group'
        required: true
      folder:
        type: string
        description: 'The folder to process'
        required: true
      terraform_module_path:
        type: string
        description: 'Terraform module path.'
        required: true
      job_name:
        type: string
        description: 'A name suffix used to improve the job and steps presentation in GitHub Actions'
        required: true
      iaciq:
        type: string
        description: 'The full output from iaciq.json'
        required: true
      TF_KEY:
        type: string
        description: 'The Terraform key to use'
        required: false      
      TF_VERSION:
        type: string
        description: 'The Terraform version to use'
        required: true
      TF_STORAGE_ACCOUNT:
        type: string
        description: 'The Terraform storage account to use'
        required: true
      TF_RESOURCE_GROUP:
        type: string
        description: 'The Terraform resource group to use'
        required: true
      TF_CONTAINER_NAME:
        type: string
        description: 'The Terraform container name to use'
        required: true
      TF_DESTROY:
        type: string
        description: 'The Terraform destroy flag'
        required: false
        default: 'false'
      ARM_CLIENT_ID_INIT:
        type: string
        description: 'The ARM_CLIENT_ID for the init environment'
        required: true
      ARM_CLIENT_ID_PLAN:
        type: string
        description: 'The ARM_CLIENT_ID for the plan environment'
        required: true
      ARM_CLIENT_ID_APPLY:
        type: string
        description: 'The ARM_CLIENT_ID for the apply environment'
        required: true
      ARM_SUBSCRIPTION_ID:
        type: string
        description: 'The ARM_SUBSCRIPTION_ID for the environment'
        required: true
      ARM_TENANT_ID:
        type: string
        description: 'The ARM_TENANT_ID for the environment'
        required: true
      STATE_EXISTS:
        type: string
        description: 'The state exists flag'
        required: true
      SHA256SUM:
        type: string
        description: 'The SHA256SUM of the bash-functions.sh'
        required: false
        default: '32f7074822082284fb24bbd79e4e8f358db7a1606d628e1186b86e0d27e7b85e'      

env:
  folder: ${{ inputs.folder}}
  terraform_module_path: ${{ inputs.terraform_module_path }}
  plan_file: "plan-${{ github.run_id }}.tfplan"
  output_file: "plan-output-${{ github.run_id }}.txt"
  apply_output_file: "apply-output-${{ github.run_id }}.txt"
  ARM_USE_AZUREAD: true     # This iaciq Workflow will use AzureAD for authentication
  ARM_USE_OIDC: true        # This iaciq Workflow will use OIDC for authentication
  TF_BACKEND_TYPE: azurerm  # This iaciq Workflow will use AzureRM as the backend
  ARM_CLIENT_ID_INIT: ${{ inputs.ARM_CLIENT_ID_INIT }}
  ARM_CLIENT_ID_PLAN: ${{ inputs.ARM_CLIENT_ID_PLAN }}
  ARM_CLIENT_ID_APPLY: ${{ inputs.ARM_CLIENT_ID_APPLY }}
  ARM_SUBSCRIPTION_ID: ${{ inputs.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ inputs.ARM_TENANT_ID }}
  TF_KEY: ${{ inputs.TF_KEY }}
  TF_VERSION: ${{ inputs.TF_VERSION }}
  TF_STORAGE_ACCOUNT: ${{ inputs.TF_STORAGE_ACCOUNT }} 
  TF_RESOURCE_GROUP: ${{ inputs.TF_RESOURCE_GROUP }}
  TF_CONTAINER_NAME: ${{ inputs.TF_CONTAINER_NAME }}
  TF_DESTROY: ${{ inputs.TF_DESTROY }}
  SHA256SUM: ${{ inputs.SHA256SUM }}
  BASH_FUNCTIONS_PATH: "${{ github.workspace }}/bash-functions.sh"

jobs:
  terraform-init:
    name: Init state for ${{ inputs.job_name }}
    if: ${{ inputs.STATE_EXISTS != 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.terraform_module_path }}
    environment: ${{ inputs.environment_init }}
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
          submodules: 'recursive'

      # Show oidc token claims
      - name: Show oidc token claims
        run: |
            IDTOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" -H "Accept: application/json; api-version=2.0" -H "Content-Type: application/json"  | jq -r '.value')
            jwtd() {
              if [[ -x $(command -v jq) ]]; then
                  jq -R 'split(".") | .[1] | @base64d | fromjson' <<< "${1}" > jwt_claims.json
                  cat jwt_claims.json
                  echo ${{ env.ACTIONS_ID_TOKEN_REQUEST_URL}} 
              fi
            }
            jwtd $IDTOKEN

      - name: Check if ARM_CLIENT_ID is configured
        run: |
          if [ -z "$ARM_CLIENT_ID" ]; then
            if [ -n "$ARM_CLIENT_ID_INIT" ]; then
              echo "ARM_CLIENT_ID=$ARM_CLIENT_ID_INIT" >> $GITHUB_ENV
            else
              echo "ARM_CLIENT_ID is not set. Exiting..."
              exit 1
            fi            
          fi

      - name: PreHook Terraform Init
        working-directory: ${{ env.folder }}
        run: hook="prehook_init.sh" && echo "echo \"$hook completed\"" >> $hook && chmod +x $hook && ./$hook

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format
        id: terraform-fmt
        working-directory: ${{ env.terraform_module_path }}
        run: terraform fmt --check --recursive
        continue-on-error: false

      # print oidc token claims
      - name: print oidc token claims
        run: |
            IDTOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" -H "Accept: application/json; api-version=2.0" -H "Content-Type: application/json"  | jq -r '.value')
            jwtd() {
              if [[ -x $(command -v jq) ]]; then
                  jq -R 'split(".") | .[1] | @base64d | fromjson' <<< "${1}" > jwt_claims.json
                  cat jwt_claims.json
                  echo ${{ env.ACTIONS_ID_TOKEN_REQUEST_URL}} 
              fi
            }
            jwtd $IDTOKEN
    
      - name: Terraform Init
        id: init
        run: |
          terraform init \
          -reconfigure \
          -backend=true \
          -upgrade \
          -backend-config="resource_group_name=$TF_RESOURCE_GROUP" \
          -backend-config="storage_account_name=$TF_STORAGE_ACCOUNT" \
          -backend-config="container_name=$TF_CONTAINER_NAME" \
          -backend-config="key=${TF_KEY}" \
          -backend-config="subscription_id=$ARM_SUBSCRIPTION_ID"      

  terraform-plan:
    name: Plan ${{ inputs.job_name }}
    needs: terraform-init
    if: always() && (needs.terraform-init.result == 'success' || needs.terraform-init.result == 'skipped')
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.terraform_module_path }}
    environment: ${{ inputs.environment_plan }}
    outputs:
      PLAN_EXIT_CODE: "${{ steps.plan.outputs.exitcode }}"
      PLAN_ERROR_CODE: "${{ steps.plan.outputs.stderr }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
          submodules: 'recursive'

      # Show oidc token claims
      - name: Show oidc token claims
        run: |
            IDTOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" -H "Accept: application/json; api-version=2.0" -H "Content-Type: application/json"  | jq -r '.value')
            jwtd() {
              if [[ -x $(command -v jq) ]]; then
                  jq -R 'split(".") | .[1] | @base64d | fromjson' <<< "${1}" > jwt_claims.json
                  cat jwt_claims.json
                  echo ${{ env.ACTIONS_ID_TOKEN_REQUEST_URL}} 
              fi
            }
            jwtd $IDTOKEN

      - name: Load bash functions
        run: |
          # Securely load bash functions with integrity check
          curl -s -o ${{ env.BASH_FUNCTIONS_PATH }} https://raw.githubusercontent.com/blinqas/iaciq/main/tools/bash-functions.sh
          if ! echo "${SHA256SUM}  ${{ env.BASH_FUNCTIONS_PATH }}" | sha256sum --check; then
            echo "Checksum verification failed. The script will not be executed."
            exit 1
          else
            chmod +x ${{ env.BASH_FUNCTIONS_PATH }} && source ${{ env.BASH_FUNCTIONS_PATH }}
          fi

      - name: Check if ARM_CLIENT_ID is configured
        run: |
          if [ -z "$ARM_CLIENT_ID" ]; then
            if [ -n "$ARM_CLIENT_ID_PLAN" ]; then
              echo "ARM_CLIENT_ID=$ARM_CLIENT_ID_PLAN" >> $GITHUB_ENV
            else
              echo "ARM_CLIENT_ID is not set. Exiting..."
              exit 1
            fi            
          fi

      - name: PreHook Terraform
        working-directory: ${{ env.folder }}
        run: hook="prehook_terraform.sh" && echo "echo \"$hook completed\"" >> $hook && chmod +x $hook && ./$hook

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        run: |
          # Check if TF_KEY is set, if not, set it to the folder base name
          if [ -z "$TF_KEY" ]; then
            export TF_KEY="$(basename $folder).tfstate"
          fi
          echo "TF_KEY: $TF_KEY"
          terraform init \
          -reconfigure \
          -backend=true \
          -upgrade \
          -backend-config="resource_group_name=$TF_RESOURCE_GROUP" \
          -backend-config="storage_account_name=$TF_STORAGE_ACCOUNT" \
          -backend-config="container_name=$TF_CONTAINER_NAME" \
          -backend-config="key=${TF_KEY}" \
          -backend-config="subscription_id=$ARM_SUBSCRIPTION_ID"

      - name: PreHook Validate
        working-directory: ${{ env.folder }}
        run: hook="prehook_validate.sh" && echo "echo \"$hook completed\"" >> $hook && chmod +x $hook && ./$hook
    
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      - name: PreHook Plan
        working-directory: ${{ env.folder }}
        run: hook="prehook_plan.sh" && echo "echo \"$hook completed\"" >> $hook && chmod +x $hook && ./$hook

      - name: Terraform Plan
        id: plan
        run: | 
          source ${{ env.BASH_FUNCTIONS_PATH }}
        
          # Check if extra_parameters.txt exists and is not empty
          if [ -s extra_parameters.txt ]; then
            mapfile -t EXTRA_PARAMETERS < extra_parameters.txt
          fi

          # Run terraform plan and save the plant to plan.tfplan, and plan output to plan_output.txt
          if [ "$TF_DESTROY" != "true" ]; then
            terraform plan "${EXTRA_PARAMETERS[@]}" $(terraform_expand_tfvars "$folder") -out="${{ env.plan_file }}" -input=false -no-color -detailed-exitcode
          else
            terraform plan -destroy "${EXTRA_PARAMETERS[@]}" $(terraform_expand_tfvars "$folder") -out="${{ env.plan_file }}" -input=false -no-color -detailed-exitcode
          fi          

        continue-on-error: true

      - run: echo "PLAN_OUTPUT \n ${{ steps.plan.outputs.stdout }}"
      - run: echo "${{ steps.plan.outputs.stdout }}" > "${{ env.output_file }}"
      - run: echo "PLAN_ERROR_CODE=${{ steps.plan.outputs.stderr }}"
      - run: echo "PLAN_EXIT_CODE=${{ steps.plan.outputs.exitcode }}"

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
      
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
      
            </details>
      
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
      
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: PostHook Plan
        working-directory: ${{ env.folder }}
        run: hook="posthook_plan.sh" && echo "echo \"$hook completed\"" >> $hook && chmod +x $hook && ./$hook

      - name: Upload Terraform Plan as Artifacts
        if: steps.plan.outputs.exitcode == '2' || steps.plan.outputs.exitcode == '0'
        uses: actions/upload-artifact@v4
        with:
          name: "plan-${{ github.run_id }}.tfplan"
          path: "${{ inputs.terraform_module_path }}/${{ env.plan_file }}"
  
      - name: Upload Terraform Plan Outputs as Artifacts
        if: steps.plan.outputs.exitcode == '2' || steps.plan.outputs.exitcode == '0'
        uses: actions/upload-artifact@v4
        with:
          name: "plan-output-${{ github.run_id }}.txt"
          path: "${{ inputs.terraform_module_path }}/${{ env.output_file }}"

  terraform-apply:    
    name: Apply ${{ inputs.job_name }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.terraform_module_path }}
    needs: terraform-plan
    if: always() && (needs.terraform-plan.result == 'success' && github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.PLAN_EXIT_CODE == '2' && needs.terraform-plan.outputs.PLAN_ERROR_CODE == '')
    environment: ${{ inputs.environment_apply }}        
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Show oidc token claims
      - name: Show oidc token claims
        run: |
            IDTOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" -H "Accept: application/json; api-version=2.0" -H "Content-Type: application/json"  | jq -r '.value')
            jwtd() {
              if [[ -x $(command -v jq) ]]; then
                  jq -R 'split(".") | .[1] | @base64d | fromjson' <<< "${1}" > jwt_claims.json
                  cat jwt_claims.json
                  echo ${{ env.ACTIONS_ID_TOKEN_REQUEST_URL}} 
              fi
            }
            jwtd $IDTOKEN

      - name: Check if ARM_CLIENT_ID is configured
        run: |
          if [ -z "$ARM_CLIENT_ID" ]; then
            if [ -n "$ARM_CLIENT_ID_APPLY" ]; then
              echo "ARM_CLIENT_ID=$ARM_CLIENT_ID_APPLY" >> $GITHUB_ENV
            else
              echo "ARM_CLIENT_ID is not set. Exiting..."
              exit 1
            fi            
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: PreHook Terraform
        working-directory: ${{ env.folder }}
        run: hook="prehook_terraform.sh" && echo "echo \"$hook completed\"" >> $hook && chmod +x $hook && ./$hook

      - name: Terraform Init
        id: init
        run: |
          # Check if TF_KEY is set, if not, set it to the folder base name
          if [ -z "$TF_KEY" ]; then
            export TF_KEY=$(basename $folder)
          fi
          echo "TF_KEY: $TF_KEY"
          terraform init \
          -reconfigure \
          -backend=true \
          -upgrade \
          -backend-config="resource_group_name=$TF_RESOURCE_GROUP" \
          -backend-config="storage_account_name=$TF_STORAGE_ACCOUNT" \
          -backend-config="container_name=$TF_CONTAINER_NAME" \
          -backend-config="key=${TF_KEY}.tfstate" \
          -backend-config="subscription_id=$ARM_SUBSCRIPTION_ID"
      
      - name: Download Terraform Plan from Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.plan_file }}
          path: ${{ env.terraform_module_path }}

      - name: PreHook Apply
        working-directory: ${{ env.folder }}
        run: hook="prehook_apply.sh" && echo "echo \"$hook completed\"" >> $hook && chmod +x $hook && ./$hook

      - name: Terraform Apply
        id: apply
        run: terraform apply -no-color ${{ env.plan_file }}

      - name: Terraform apply output
        id: apply-run
        run: |
          echo "${{ steps.apply.outputs.stdout }}"
          echo "${{ steps.apply.outputs.stdout }}" > "${{ env.apply_output_file }}"

      - name: Upload Terraform Apply Outputs as Artifacts
        if: steps.apply.outputs.exitcode == '0'
        uses: actions/upload-artifact@v4
        with:
          name: "apply-output-${{ github.run_id }}.txt"
          path: "${{ inputs.terraform_module_path }}/${{ env.apply_output_file }}"

      - name: PostHook Apply
        working-directory: ${{ env.folder }}
        run: hook="posthook_apply.sh" && echo "echo \"$hook completed\"" >> $hook && chmod +x $hook && ./$hook